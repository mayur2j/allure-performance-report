package com.yourcompany.hooks;

import com.yourcompany.utils.PerformanceStorage;
import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.Scenario;
import io.qameta.allure.Allure;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.Map;

/**
 * Calculates and attaches scenario-level performance summary
 */
public class ScenarioPerformanceHooks {
    
    private long scenarioStartTime;
    
    @Before(order = 0)
    public void beforeScenario(Scenario scenario) {
        scenarioStartTime = System.currentTimeMillis();
        
        scenario.log("═══════════════════════════════════════════════════");
        scenario.log("  SCENARIO: " + scenario.getName());
        scenario.log("═══════════════════════════════════════════════════");
    }
    
    @After(order = 200)
    public void afterScenario(Scenario scenario) {
        long scenarioDuration = System.currentTimeMillis() - scenarioStartTime;
        
        // Calculate scenario averages
        Map<String, Double> averages = PerformanceStorage.calculateScenarioAverages(scenario.getName());
        
        if (!averages.isEmpty()) {
            
            // Create scenario summary
            String summary = createScenarioSummary(scenario.getName(), scenarioDuration, averages);
            
            Allure.addAttachment(
                "📊 Scenario Performance Summary",
                "text/plain",
                new ByteArrayInputStream(summary.getBytes(StandardCharsets.UTF_8)),
                ".txt"
            );
            
            // Create HTML dashboard
            String htmlSummary = createScenarioHtmlSummary(scenario.getName(), scenarioDuration, averages);
            
            Allure.addAttachment(
                "📈 Scenario Performance Dashboard",
                "text/html",
                new ByteArrayInputStream(htmlSummary.getBytes(StandardCharsets.UTF_8)),
                ".html"
            );
            
            // Cucumber log
            scenario.log("═══════════════════════════════════════════════════");
            scenario.log("  SCENARIO PERFORMANCE SUMMARY");
            scenario.log("═══════════════════════════════════════════════════");
            scenario.log(String.format("  Total Duration:        %d ms", scenarioDuration));
            scenario.log(String.format("  Total Steps:           %.0f", averages.get("totalSteps")));
            scenario.log(String.format("  Cached Steps:          %.0f", averages.get("cachedSteps")));
            scenario.log(String.format("  Avg Page Load:         %.0f ms", averages.get("avgPageLoadTime")));
            scenario.log(String.format("  Avg DOM Ready:         %.0f ms", averages.get("avgDomReadyTime")));
            scenario.log(String.format("  Avg Response:          %.0f ms", averages.get("avgResponseTime")));
            scenario.log(String.format("  Avg TTFB:              %.0f ms", averages.get("avgTtfb")));
            scenario.log(String.format("  Avg Connect:           %.0f ms", averages.get("avgConnectTime")));
            scenario.log(String.format("  Avg DNS Lookup:        %.0f ms", averages.get("avgDomainLookupTime")));
            scenario.log("═══════════════════════════════════════════════════");
        }
    }
    
    private String createScenarioSummary(String scenarioName, long duration, Map<String, Double> averages) {
        return String.format(
            "╔══════════════════════════════════════════════════════════════════╗\n" +
            "║           SCENARIO PERFORMANCE SUMMARY                          ║\n" +
            "╠══════════════════════════════════════════════════════════════════╣\n" +
            "║  Scenario:               %-41s ║\n" +
            "║  Total Duration:         %-35s ms    ║\n" +
            "║  Total Steps:            %-41.0f ║\n" +
            "║  Cached Steps:           %-41.0f ║\n" +
            "╠══════════════════════════════════════════════════════════════════╣\n" +
            "║  AVERAGE METRICS                                                 ║\n" +
            "╠══════════════════════════════════════════════════════════════════╣\n" +
            "║  📄 Avg Page Load Time:  %-35.0f ms    ║\n" +
            "║  🔄 Avg DOM Ready Time:  %-35.0f ms    ║\n" +
            "║  📡 Avg Response Time:   %-35.0f ms    ║\n" +
            "║  ⏱️  Avg TTFB:            %-35.0f ms    ║\n" +
            "║  🔌 Avg Connect Time:    %-35.0f ms    ║\n" +
            "║  🌐 Avg DNS Lookup:      %-35.0f ms    ║\n" +
            "╚══════════════════════════════════════════════════════════════════╝",
            truncate(scenarioName, 41),
            duration,
            averages.get("totalSteps"),
            averages.get("cachedSteps"),
            averages.get("avgPageLoadTime"),
            averages.get("avgDomReadyTime"),
            averages.get("avgResponseTime"),
            averages.get("avgTtfb"),
            averages.get("avgConnectTime"),
            averages.get("avgDomainLookupTime")
        );
    }
    
    private String createScenarioHtmlSummary(String scenarioName, long duration, Map<String, Double> averages) {
        StringBuilder html = new StringBuilder();
        html.append("<!DOCTYPE html><html><head>");
        html.append("<meta charset='UTF-8'>");
        html.append("<style>");
        html.append("body { font-family: 'Segoe UI', sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%); }");
        html.append(".summary { background: white; border-radius: 12px; padding: 30px; box-shadow: 0 10px 40px rgba(0,0,0,0.3); }");
        html.append("h1 { color: #1e3c72; margin-top: 0; text-align: center; }");
        html.append(".info { background: #e8f5e9; padding: 15px; border-radius: 8px; margin-bottom: 20px; }");
        html.append(".metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }");
        html.append(".metric-card { background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%); color: white; padding: 20px; border-radius: 8px; text-align: center; }");
        html.append(".metric-value { font-size: 28px; font-weight: bold; margin: 10px 0; }");
        html.append(".metric-label { font-size: 11px; opacity: 0.9; text-transform: uppercase; }");
        html.append("</style>");
        html.append("</head><body>");
        html.append("<div class='summary'>");
        html.append("<h1>📊 Scenario Performance Summary</h1>");
        
        html.append("<div class='info'>");
        html.append(String.format("<p><strong>Scenario:</strong> %s</p>", scenarioName));
        html.append(String.format("<p><strong>Total Duration:</strong> %d ms</p>", duration));
        html.append(String.format("<p><strong>Total Steps:</strong> %.0f | <strong>Cached:</strong> %.0f</p>", 
            averages.get("totalSteps"), averages.get("cachedSteps")));
        html.append("</div>");
        
        html.append("<h2>Average Performance Metrics</h2>");
        html.append("<div class='metrics-grid'>");
        
        html.append(String.format(
            "<div class='metric-card'><div class='metric-label'>Avg Page Load</div><div class='metric-value'>%.0f ms</div></div>",
            averages.get("avgPageLoadTime")
        ));
        
        html.append(String.format(
            "<div class='metric-card'><div class='metric-label'>Avg DOM Ready</div><div class='metric-value'>%.0f ms</div></div>",
            averages.get("avgDomReadyTime")
        ));
        
        html.append(String.format(
            "<div class='metric-card'><div class='metric-label'>Avg Response</div><div class='metric-value'>%.0f ms</div></div>",
            averages.get("avgResponseTime")
        ));
        
        html.append(String.format(
            "<div class='metric-card'><div class='metric-label'>Avg TTFB</div><div class='metric-value'>%.0f ms</div></div>",
            averages.get("avgTtfb")
        ));
        
        html.append(String.format(
            "<div class='metric-card'><div class='metric-label'>Avg Connect</div><div class='metric-value'>%.0f ms</div></div>",
            averages.get("avgConnectTime")
        ));
        
        html.append(String.format(
            "<div class='metric-card'><div class='metric-label'>Avg DNS Lookup</div><div class='metric-value'>%.0f ms</div></div>",
            averages.get("avgDomainLookupTime")
        ));
        
        html.append("</div>");
        html.append("</div>");
        html.append("</body></html>");
        
        return html.toString();
    }
    
    private String truncate(String text, int maxLength) {
        if (text == null) return "";
        if (text.length() <= maxLength) return text;
        return text.substring(0, maxLength - 3) + "...";
    }
}